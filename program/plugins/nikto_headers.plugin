###############################################################################
#  Copyright (C) 2007 Chris Sullo
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; version 2
#  of the License only.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to
#  Free Software Foundation, 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
###############################################################################
# PURPOSE:
# General HTTP headers checks
###############################################################################
use vars qw/$HEADERSDB/;

sub nikto_headers_init {
    my $id = {
        name        => "headers",
        full_name   => "HTTP Headers",
        author      => "Sullo",
        description => "Performs various checks against the headers returned from an HTTP request.",
        hooks       => {
                   scan      => { method => \&nikto_headers, },
                   postfetch => { method => \&nikto_headers_postfetch, },
                   start     => { method => \&nikto_headers_load, },
                   },
        copyright => "2008 Chris Sullo"
        };

    # some global variables
    use vars qw/%HFOUND %ETAGS %XFRAME %HEADERS_STS %BREACH/;
    use vars qw/%HEADERS_XCO %HEADERS_XCTO/;

    return $id;
}

sub nikto_headers_load {
    $HEADERSDB = init_db("db_headers");
}

sub nikto_headers_postfetch {
    return if $mark->{'terminate'};
    my ($mark, $parameters, $request, $result) = @_;

    # Skip OPTIONS
    return if $request->{'whisker'}{'method'} eq "OPTIONS";

    # look for internal IPs
    foreach my $header (keys %$result) {

        # skip some headers unlikely to have security implications, for speed
        if    ($header eq 'whisker')         { next; }
        elsif ($header eq 'date')            { next; }
        elsif ($header eq 'content-type')    { next; }
        elsif ($header eq 'content-length')  { next; }
        elsif ($header eq 'connection')      { next; }
        elsif ($header eq 'x-mod-pagespeed') { next; }
        elsif ($header eq 'x-page-speed')    { next; }
        elsif (defined $HFOUND{$header})     { next; }

        next if $header eq 'server'       && substr($result->{$header}, 0, 8) eq 'WebSEAL/';
        next if $header eq 'x-powered-by' && $result->{$header} =~ /Oracle GlassFish Server [0-9]/;

        # Check for known headers
        nikto_headers_check($mark, $result, $header, 999986, $request);

        foreach my $ip (get_ips($result->{$header})) {
            my ($valid, $internal, $loopback) = is_ip($ip);
            if ($valid && !$loopback) {
                if ($ip ne $mark->{'ip'}) {

                    # is it an internal, or just different?
                    my $msg;
                    if ($internal) { $msg .= "RFC-1918 "; }
                    $msg .= $request->{'whisker'}{'uri'}
                      . ": IP address found in the '$header' header. The IP is \"$ip\".";
                    add_vulnerability(
                        $mark,
                        $msg,
                        999979,
                        "https://portswigger.net/kb/issues/00600300_private-ip-addresses-disclosed",
                        $request->{'whisker'}->{'method'},
                        $request->{'whisker'}->{'uri'},
                        $request,
                        $result
                        );
                    $HFOUND{$header} = 1;
                }
            }
        }
    }

    # look for inode in etag header
    if (  !defined $ETAGS{ $mark->{hostname} }{ $mark->{port} }
        && defined $result->{'etag'}
        && $result->{'etag'} =~ m/-/) {
        my $etag = $result->{'etag'};
        $etag =~ s/"//g;
        my @fields = split("-", $etag);

        # Only report ETags which actually leak inodes...
        if (scalar(@fields) == 3) {
            my $message =
                $request->{'whisker'}{'uri'}
              . ": Server may leak inodes via ETags, header found with file "
              . $request->{'whisker'}->{'uri'};

            # check for numbers that are too large
            my $ishex = 1;
            for (my $i = 0 ; $i < 3 ; $i++) {
                if ((length($fields[$i]) > 14) || ($fields[$i] !~ /^[0-9A-F]+$/i)) {
                    $ishex = 0;
                }
            }
            use bignum;
            my ($inode, $size, $mtime, $ltime);
            if ($ishex) {
                $inode = "0x$fields[0]";
                $size  = "0x$fields[1]";
                $mtime = "0x$fields[2]";
                $ltime = substr(sprintf("%s", hex($mtime)), 0, 10);
            }
            else {
                $inode = $fields[0];
                $size  = $fields[1];
                $mtime = $ltime = $fields[2];
            }

            $message .=
              ($ishex == 1)
              ? sprintf(", inode: %d, size: %d, mtime: %s",
                        hex($inode), hex($size), scalar(localtime($ltime)))
              : sprintf(", inode: %s, size: %s, mtime: %s", $inode, $size, $mtime);
            add_vulnerability($mark, $message, 999984, "CVE-2003-1418",
                              $request->{'whisker'}->{'method'},
                              $request->{'whisker'}->{'uri'},
                              $request, $result);
            $ETAGS{ $mark->{hostname} }{ $mark->{port} } = 1;
        }
    }

    # Look for X-Frame-Options
    if (!$XFRAME{ $mark->{hostname} }{ $mark->{port} } 
	&& defined $result->{'whisker'}->{'code'} 
	&& $result->{'whisker'}->{'code'} == 200) {
        if (defined $result->{'x-frame-options'}) {
                add_vulnerability(
                    $mark,
                    $request->{'whisker'}{'uri'}
                      . ":X-Frame-Options header is deprecated and has been replaced with the Content-Security-Policy HTTP header with the frame-ancestors directive instead.",
                    999978,
                    "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
                    $request->{'whisker'}->{'method'},
                    $request->{'whisker'}->{'uri'},
                    $request,
                    $result
                    );
        	$XFRAME{ $mark->{hostname} }{ $mark->{port} } = 1;
        }
    }

    # Incapsula WAF
    if (   defined $result->{'x-cdn'}
        && ($result->{'x-cdn'} == "Incapsula")
        && ($HFOUND{'x-cdn'} != 1)) {
        add_vulnerability(
                     $mark,
                     $request->{'whisker'}{'uri'} . ": Incapsula WAF is in use.",
                     999976,
                     "https://www.sumasoft.com/incapsula-cloud-based-web-application-firewall-waf/",
                     $request->{'whisker'}->{'method'},
                     $request->{'whisker'}->{'uri'},
                     $request,
                     $result
                     );
        $HFOUND{'x-cdn'} = 1;
    }

    # NetIQ
    if (defined $result->{'x-mag'} && $HFOUND{'x-mag'} != 1) {
        add_vulnerability(
            $mark,
            $request->{'whisker'}{'uri'} . ": NetIQ debug information is enabled.",
            "000474",
            "https://www.netiq.com/documentation/netiqaccessmanager32/accessgatewayhelp/data/agsglobaladv.html",
            $request->{'whisker'}->{'method'},
            $request->{'whisker'}->{'uri'},
            $request,
            $result
            );
        $HFOUND{'x-mag'} = 1;
    }

    # Drupal
    if (defined $result->{'x-generator'} && $HFOUND{'x-generator'} != 1) {
        my $drupal = $result->{'x-generator'};
        $drupal =~ s/ \(.*$//;
        add_vulnerability(
              $mark,
              $request->{'whisker'}{'uri'} . ": $drupal was identified via the x-generator header.",
              "000326",
              "https://www.drupal.org/project/remove_http_headers",
              $request->{'whisker'}->{'method'},
              $request->{'whisker'}->{'uri'},
              $request,
              $result
              );
        $HFOUND{'x-generator'} = 1;
    }
    elsif (   defined $result->{'x-drupal-cache'}
           && $HFOUND{'x-drupal-cache'} != 1
           && $HFOUND{'x-generator'} != 1) {
        add_vulnerability(
            $mark,
            $request->{'whisker'}{'uri'} . ": Drupal was identified via the x-drupal-cache header.",
            "000407",
            "https://support.acquia.com/hc/en-us/articles/360005275013-How-Drupal-page-cache-works",
            $request->{'whisker'}->{'method'},
            $request->{'whisker'}->{'uri'},
            $request,
            $result
            );
        $HFOUND{'x-drupal-cache'} = 1;
    }
    if (defined $result->{'link'} && $HFOUND{'link'} != 1) {
        add_vulnerability(
                $mark,
                $request->{'whisker'}{'uri'} . ": Link header found with value: $result->{'link'}.",
                "000427",
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Link",
                $request->{'whisker'}->{'method'},
                $request->{'whisker'}->{'uri'},
                $request,
                $result
                );
        $HFOUND{'link'} = 1;
    }

    # Fastly
    if (defined $result->{'x-timer'} && $HFOUND{'x-timer'} != 1) {
        add_vulnerability(
                $mark,
                $request->{'whisker'}{'uri'} . ": Fastly CDN was identified by the x-timer header.",
                "000432",
                "https://www.fastly.com/",
                $request->{'whisker'}->{'method'},
                $request->{'whisker'}->{'uri'},
                $request,
                $result
                );
        $HFOUND{'x-timer'} = 1;
    }
    if (defined $result->{'fastly-restarts'} && $HFOUND{'fastly-restarts'} != 1) {
        add_vulnerability($mark,
                          $request->{'whisker'}{'uri'}
                            . ": Fastly CDN was identified by the fastly-restarts header.",
                          "000430",
                          "https://www.fastly.com/",
                          $request->{'whisker'}->{'method'},
                          $request->{'whisker'}->{'uri'},
                          $request,
                          $result
                          );
        $HFOUND{'fastly-restarts'} = 1;
    }

    # Netlify
    if (defined $result->{'x-nf-request-id'} && $HFOUND{'x-nf-request-id'} != 1) {
        add_vulnerability($mark,
                          $request->{'whisker'}{'uri'}
                            . ": Netlify was identified by the x-nf-request-id header.",
                          "000287",
                          "https://www.netlify.com/",
                          $request->{'whisker'}->{'method'},
                          $request->{'whisker'}->{'uri'},
                          $request,
                          $result
                          );
        $HFOUND{'x-nf-request-id'} = 1;
    }

    # Look for any uncommon headers
    foreach my $header (keys %$result) {
        my $found = 0;
        foreach my $st_header (@$HEADERSDB) {
            if ($header eq $st_header->{'header'}) {
                $found = 1;
            }
            elsif (defined $HFOUND{$header}{ $mark->{'hostname'} }) { $found = 1; }
        }
        if ($found == 0) {
            my $x = $result->{$header};
            $x =~ s/\s+.*$//;
            $mark->{'components'}->{$x} = 1;
            $vuln = $request->{'whisker'}{'uri'}
              . ": Uncommon header '$header' found, with contents: $result->{$header}";
            if (ref($x) eq 'ARRAY') {
                $multiheader = '(';
                foreach $k (@{$x}) {
                    $multiheader .= "$k,";
                }
                $multiheader .= ')';
                $vuln = $request->{'whisker'}{'uri'}
                  . ": Uncommon header '$header' found, with multiple values: $multiheader";
            }
            add_vulnerability($mark, $vuln, 999100, "",
                              $request->{'whisker'}->{'method'},
                              $request->{'whisker'}->{'uri'},
                              $request, $result);
            $HFOUND{$header}{ $mark->{'hostname'} } = 1;
        }
    }

    # Strict-Transport-Security
    if ($mark->{'ssl'} && !$HEADERS_STS{ $mark->{hostname} }{ $mark->{port} } && defined $result) {
        if (!defined $result->{'strict-transport-security'}) {
            add_vulnerability(
                $mark,
                $request->{'whisker'}{'uri'}
                  . ": The site uses TLS and the Strict-Transport-Security HTTP header is not defined.",
                999970,
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security",
                $request->{'whisker'}->{'method'},
                $request->{'whisker'}->{'uri'},
                $request,
                $result
                );
        }
        elsif ($result->{'strict-transport-security'} =~ /max-age="?0"?/i) {
            add_vulnerability(
                $mark,
                $request->{'whisker'}{'uri'}
                  . ": The site uses TLS and the Strict-Transport-Security HTTP header is set with max-age=0.",
                999971,
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security",
                $request->{'whisker'}->{'method'},
                $request->{'whisker'}->{'uri'},
                $request,
                $result
                );
        }

        $HEADERS_STS{ $mark->{hostname} }{ $mark->{port} } = 1;
    }

    # Alt-Svc (HTTP/3)
    if (!$HEADERS_XCO{ $mark->{hostname} }{ $mark->{port} }
        && defined $result->{'whisker'}->{'code'}) {
        if (defined $result->{'alt-svc'}) {
            my ($protocol, $msg);
            $result->{'alt-svc'} =~ /.*(h[23])="([^"]+)"/;
            my $endpoint = $2;
            if ($1 eq "h2") {
                $protocol = "HTTP/2 over TLS";
            }
            elsif ($1 eq "h2c") {
                $protocol = "HTTP/2 over TCP";
                $msg      = " Unencrypted.";
            }
            elsif ($1 eq "h3") {
                $protocol = "HTTP/3";
                $msg      = " Nikto cannot test HTTP/3 over QUIC.";
            }
            else {
                $protocol = $1;
            }

            add_vulnerability(
                $mark,
                $request->{'whisker'}{'uri'}
                  . ": An alt-svc header was found which is advertising $protocol. The endpoint is: '$endpoint'.$msg",
                "011799",
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/alt-svc",
                $request->{'whisker'}->{'method'},
                $request->{'whisker'}->{'uri'},
                $request,
                $result
                );
            $HEADERS_XCO{ $mark->{hostname} }{ $mark->{port} } = 1;
        }
    }

    # X-Content-Type-Options
    if (!$HEADERS_XCTO{ $mark->{hostname} }{ $mark->{port} }
        && defined $result->{'whisker'}->{'code'}
	&& $result->{'whisker'}->{'code'} == 200) {
        if (!defined $result->{'x-content-type-options'}) {
            add_vulnerability(
                $mark,
                $request->{'whisker'}{'uri'}
                  . ": The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type.",
                999103,
                "https://www.netsparker.com/web-vulnerability-scanner/vulnerabilities/missing-content-type-header/",
                $request->{'whisker'}->{'method'},
                $request->{'whisker'}->{'uri'},
                $request,
                $result
                );
            $HEADERS_XCTO{ $mark->{hostname} }{ $mark->{port} } = 1;
        }
    }

    # x-clacks-overhead
    if (!$HEADERS_XCO{ $mark->{hostname} }{ $mark->{port} }
        && defined $result->{'whisker'}->{'code'}) {
        if (defined $result->{'x-clacks-overhead'}) {
            add_vulnerability(
                $mark,
                $request->{'whisker'}{'uri'}
                  . ": There appears to be Clacks Overhead on the server and the message is: $result->{'x-clacks-overhead'}",
                999104,
                "https://xclacksoverhead.org/home/about",
                $request->{'whisker'}->{'method'},
                $request->{'whisker'}->{'uri'},
                $request,
                $result
                );
            $HEADERS_XCO{ $mark->{hostname} }{ $mark->{port} } = 1;
        }
    }

    # CSP Report URLs
    if (!$HEADERS_XCO{ $mark->{hostname} }{ $mark->{port} }
        && defined $result->{'whisker'}->{'code'}) {
        if (defined $result->{'report-uri'}) {
            add_vulnerability(
                $mark,
                $request->{'whisker'}{'uri'}
                  . ": A CSP report-uri header was found. The URL is: $result->{'report-uri'}",
                000433,
                "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/report-uri",
                $request->{'whisker'}->{'method'},
                $request->{'whisker'}->{'uri'},
                $request,
                $result
                );
            $HEADERS_XCO{ $mark->{hostname} }{ $mark->{port} } = 1;
        }
    }

    return $request, $result;
}

sub nikto_headers_check {
    return if $mark->{'terminate'};
    my ($mark, $result, $header, $tid, $request) = @_;
    my @interesting_headers =
      qw /commerce-server-software daap-server dasl datacenter dav generator hosted-by hosted-with microsoftofficewebserver microsoftsharepointteamservices ms-author-via powered-by server-name serverid servlet-engine via x-aspnet-version x-blackboard-product x-cocoon-version x-compressed-by x-dmuser x-gallery-version x-hosted-at x-hostname x-isp x-powered-by x-responding-server x-served-by x-server x-server-name x-webserver x-owa-version access-control-allow-origin x-application-context cneonction nncoection xxx-real-ip bae-env-addr-sql-ip bae-env-addr-sql-port cf-connecting-ip fastly-client-ip incap-client-ip real-ip rlnclientipaddr true-client-ip x-clientip x-client-ip x-cluster-client-ip  x-ip x-nokia-ipaddress x-real-ip x-wap-network-client-ip reason-code/;

    foreach my $header (@interesting_headers) {
        if (exists $result->{$header}) {
            my $key =
              LW2::md5(  $mark->{'ip'}
                       . $mark->{'hostname'}
                       . $mark->{'port'}
                       . $mark->{'ssl'}
                       . $result->{'whisker'}->{'method'}
                       . $header);

            if (!exists $HFOUND{$key}) {
                my $value = "";
                if (ref($result->{$header}) eq ARRAY) {
                    $value = join(', ', @{ $result->{$header} });
                }
                else {
                    $value = $result->{$header};
                }
                $HFOUND{$key} = 1;
                add_vulnerability(
                                $mark,
                                $request->{'whisker'}{'uri'} . ": Retrieved $header header: $value",
                                $tid,
                                "",
                                $request->{'whisker'}->{'method'},
                                $request->{'whisker'}->{'uri'},
                                $request,
                                $result
                                );
            }
        }
    }
}

sub nikto_headers {
    return if $mark->{'terminate'};
    my ($mark) = @_;

    #######################################################################
    # look for to see whether its vulnerable to the Translate: f
    my %transheaders;
    $transheaders{'Translate'} = "f";
    foreach
      my $f (qw/\/index.asp \/junk999.asp \/index.aspx \/junk988.aspx \/login.asp \/login.aspx/) {
        return if $mark->{'terminate'};
        my ($res, $content, $error, $request, $result) =
          nfetch($mark, $f, "GET", "", "", "", "headers: Translate-f #1");
        if ($res eq "200") {
            ($res, $content, $error, $request, $result) =
              nfetch($mark, $f . "\\", "GET", "", \%transheaders, "", "headers: Translate-f #2");
            if ($res eq "200") {
                if ($content =~ /<asp:/ || $content =~ /<\/asp:/) {
                    add_vulnerability(
                        $mark,
                        $request->{'whisker'}{'uri'}
                          . ": Host may be vulnerable to a source disclosure using the Translate: header",
                        999983,
                        "CVE-2000-0778",
                        "GET",
                        $f,
                        $request,
                        $result
                        );
                    last;
                }
            }
        }
    }

    #######################################################################
    # Content-Location header in IIS
    my (%locheaders, %locflags, $cl, $l, $wa);
    $locheaders{'User-Agent'} = $VARIABLES{'useragent'};
    $locheaders{'User-Agent'} =~ s/\@TESTID/headers:\ IIS\ internal\ IP/;
    $locflags{'noclean'} = 1;
    $locflags{'nohost'}  = 1;
    $cl                  = $l = $wa = $rt = 0;

    foreach my $uri ('/',                              '/images',
                     '/Autodiscover/Autodiscover.xml', '/Autodiscover/',
                     '/Microsoft-Server-ActiveSync',   '/Microsoft-Server-ActiveSync/default.css',
                     '/ECP',                           '/EWS',
                     '/EWS/Exchange.asmx',             '/Exchange',
                     '/OWA',                           '/Microsoft-Server-ActiveSync/default.eas',
                     '/Rpc',                           '/EWS/Services.wsdl',
                     '/ecp',                           '/OAB',
                     '/aspnet_client',                 '/PowerShell'
                     ) {

        my ($res, $content, $errors, $request, $result) =
          nfetch($mark, $uri, "GET", "", \%locheaders, \%locflags, "headers: HTTP 1.0 internal IP",
                 "1.0");

        if (!$cl && ($result->{'content-location'} ne "")) {
            my @ips = get_ips($result->{'content-location'});
            my ($valid, $internal, $loopback) = is_ip($ips[0]);
            if (($ips[0] ne '') && ($ips[0] ne $mark->{'ip'})) {
                $cl = 1;
                add_vulnerability(
                    $mark,
                    $uri
                      . ": IIS may reveal its internal or real IP in the Content-Location header via a request with HTTP/1.0. The value is \"$ips[0]\".",
                    999989,
                    "CVE-2000-0649",
                    "GET",
                    $uri,
                    $request,
                    $result
                    );
            }
        }

        if (!$l && ($result->{'location'} ne "")) {
            my @ips = get_ips($result->{'location'});
            my ($valid, $internal, $loopback) = is_ip($ips[0]);
            if (($ips[0] ne '') && ($ips[0] ne $mark->{'ip'})) {
                $l = 1;
                add_vulnerability(
                    $mark,
                    $uri
                      . ": The web server may reveal its internal or real IP in the Location header via a request to with HTTP/1.0. The value is \"$ips[0]\".",
                    999988,
                    "CVE-2000-0649",
                    "GET",
                    $uri,
                    $request,
                    $result
                    );
            }
        }

        if (!$wa && ($result->{'www-authenticate'} ne "")) {
            my @ips = get_ips($result->{'www-authenticate'});
            my ($valid, $internal, $loopback) = is_ip($ips[0]);
            if (($ips[0] ne '') && ($ips[0] ne $mark->{'ip'})) {
                $wa = 1;
                add_vulnerability(
                    $mark,
                    $request->{'whisker'}{'uri'}
                      . ": Microsoft Exchange Systems (CAS and OWA) may reveal the internal or real IP in the WWW-Authenticate header via a request to $uri over HTTP/1.0. The value is \"$ips[0]\".",
                    999986,
                    "CVE-2000-0649",
                    "GET",
                    $uri,
                    $request,
                    $result
                    );
            }
        }

        if (!$rt && ($result->{'report-to'} ne "")) {
            my @bits = split("url\": \"", $result->{'report-to'});
            my $have = 0;
            my @urls;
            foreach my $b (@bits) {
                next if $b !~ /^http/;
                $b =~ s/\".*$//;
                if ($b ne "") {
                    push(@urls, $b);
                    $have = $rt = 1;
                }
            }
            if ($have) {
                add_vulnerability(
                    $mark,
                    $request->{'whisker'}{'uri'}
                      . ": A CSP report-to header was found with the following URLs: "
                      . join(", ", @urls),
                    999945,
                    "https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/report-to",
                    "GET",
                    $uri,
                    $request,
                    $result
                    );
            }
        }

        if ($cl && $l && $wa && $rt) { last; }
    }

    #######################################################################
    # Location header in WebLogic
    # Clear out locheaders
    for (keys %locheaders) {
        delete $locheaders{$_};
    }
    $locheaders{'User-Agent'} = $VARIABLES{'useragent'};
    $locheaders{'User-Agent'} =~ s/\@TESTID/headers:\ WebLogic\ internal\ IP/;

    ($res, $content, $errors, $request, $result) =
      nfetch($mark, '.', "GET", "", \%locheaders, \%flags, "headers: WebLogic internal IP", "1.0");

    my @ips = get_ips($result->{'location'});
    if ($ips[0] ne '') {
        my ($valid, $internal, $loopback) = is_ip($ips[0]);
        if ($valid && !$loopback && ($ips[0] ne $mark->{'ip'})) {
            my $msg = $request->{'whisker'}{'uri'} . ": WebLogic may reveal ";
            if   ($internal) { $msg .= "an RFC-1918 IP address. "; }
            else             { $msg .= "a different IP address in the Location header."; }
            $msg .= "The IP is \"$ips[0]\".";
            add_vulnerability($mark, $msg, 999987, "BID-7257", "GET", ".", $request, $result);
        }
    }

    #######################################################################
    # BREACH Checks
    for (keys %locheaders) {
        delete $locheaders{$_};
    }

    $locheaders{'User-Agent'} = $VARIABLES{'useragent'};
    $locheaders{'User-Agent'} =~ s/\@TESTID/headers:\ BREACH\ Check/;
    $locheaders{'Accept-Encoding'} = "deflate, gzip";
    ($res, $content, $errors, $request, $result) =
      nfetch($mark, '/', "GET", "", \%locheaders, \%flags, "headers: BREACH Test", "1.1");

    if (!$BREACH && defined $result && $mark->{'ssl'}) {
        if (defined $result->{'content-encoding'}) {
            if ($result->{'content-encoding'} =~ "(deflate|gzip)") {
                $BREACH = 1;
                add_vulnerability(
                    $mark,
                    $request->{'whisker'}{'uri'}
                      . ": The Content-Encoding header is set to \"deflate\" which may mean that the server is vulnerable to the BREACH attack.",
                    999966,
                    "http://breachattack.com/",
                    $request->{'whisker'}->{'method'},
                    $request->{'whisker'}->{'uri'},
                    $request,
                    $result
                    );
            }
        }
    }

    #######################################################################
    # Jetty CVE-2015-2080
    for (keys %locheaders) {
        delete $locheaders{$_};
    }
    $locheaders{'User-Agent'} = $VARIABLES{'useragent'};
    $locheaders{'Nikto'}      = "\x1f";

    ($res, $content, $errors, $request, $result) =
      nfetch($mark, '/', "GET", "", \%locheaders, \%flags, "headers: Jetty CVE-2015-2080", "1.0");

    if (($res eq "400") && ($result->{'whisker'}->{'message'} =~ /x1f<<</)) {
        add_vulnerability(
            $mark,
            $request->{'whisker'}{'uri'}
              . ": Jetty > 9.2.3 and < 9.2.9 may reveal the contents of internal memory if illegal characters are passed.",
            "000477",
            "CVE-2015-2080",
            "GET",
            ".",
            $request,
            $result
            );
    }

}
1;
